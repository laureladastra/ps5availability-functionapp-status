trigger:
  - main

pool:
  vmImage: 'macOS-10.14'

variables:
  testFolder: '$(Build.SourcesDirectory)/tests/qa'
  applicationName: 'ps5-availability-functionapp'

steps:
  - checkout: self
    displayName: Checkout and fetch repository
    clean: true
    persistCredentials: true
  - script: |
      version=$(node -p "require('./package.json').version") 
      echo "##vso[build.updatebuildnumber]$version"
    displayName: Configure build number from NPM package.json
  - powershell: |
      Write-Host "Configuring environment to run tests"
      $version = (Get-Package -Name 'Pester').Version
      if ($version -ne '4.10.0') {
          Write-Host "##[warning]detected incompatible version $version for Pester"
          if ($version) {
              Get-Package -Name Pester -ProviderName PowerShellGet | Out-Null | Uninstall-Package -Scope CurrentUser -Force | Out-Null
          }
          Install-Package -Name Pester -MaximumVersion '4.10.0' -ProviderName PowerShellGet -Scope CurrentUser -Force
          Write-Host "Installed Pester version $((Get-Package -Name 'Pester').Version)"
      }
      else {
          Write-Host "Pester is installed according to the requirements."
      }
    displayName: Configure test environment
    errorActionPreference: stop
  - powershell: |
      Write-Host "Running QA tests for FunctionApp"
      Invoke-Pester -Path $(testFolder)/QA.FunctionApp.Tests.ps1 -OutputFormat JUnitXml -OutputFile "$(testFolder)/QATestResults.xml"
    displayName: Run quality assurance tests
    errorActionPreference: stop
  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/*Test*.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'FunctionApp QA'
  - script: |
      echo "##[command]git clean --fdx"
      git clean -ffdx
    displayName: Clean directory before publish
  - task: CopyFiles@2
    displayName: 'Copy files to: $(Build.StagingDirectory)'
    inputs:
      CleanTargetFolder: true
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '**'
      TargetFolder: '$(Build.StagingDirectory)'
  - task: ArchiveFiles@2
    displayName: 'Archive files from directory'
    inputs:
      rootFolderOrFile: '$(Build.StagingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/$(applicationName)-v$(Build.BuildNumber).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish build artifacts
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)/$(applicationName)-v$(Build.BuildNumber).zip'
      ArtifactName: '$(Build.BuildNumber)'
      publishLocation: 'Container'
