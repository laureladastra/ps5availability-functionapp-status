# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'macOS-10.14'

variables:
  testFolder: '$(System.DefaultWorkingDirectory)/tests/qa'

steps:
- checkout: self
  clean: true
  displayName: 'Checkout and fetch repository'


- powershell: Write-Host "Repository location $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/tests/qa"
  displayName: Get repository location on disk
  
- script: |
    version=$(node -p "require('./package.json').version") 
    echo "##vso[build.updatebuildnumber]$version"
  displayName: 'Configure build number from NPM package.json'

- powershell: |
    Write-Host "Configuring environment to run tests"
    $version = (Get-Package -Name 'Pester').Version
    if ($version -ne '4.10.0') {
        Write-Host "##[warning]Detected incompatible Pester version ($version)."
        if ($version) {
            Get-Package -Name Pester -ProviderName PowerShellGet | Uninstall-Package -Scope CurrentUser -Force
        }
        Install-Package -Name Pester -MaximumVersion '4.10.0' -ProviderName PowerShellGet -Scope CurrentUser -Force
        Write-Host "Installed Pester version '$((Get-Package -Name 'Pester').Version)'"
    }
    else {
        Write-Host "Pester is installed according to the requirements."
    }
  displayName: 'Configure test environment'
  errorActionPreference: stop
- powershell: | 
    Write-Host "Running QA tests for FunctionApp"
    Invoke-Pester -Path $(testFolder)/QA.FunctionApp.Tests.ps1 -OutputFormat JUnitXml -OutputFile "QATestResults.xml" -EnableExit
    Write-Host ($(Get-ChildItem)| Out-String)
    displayName: Run QA tests (Pester)
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*Test*.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'QA FunctionApp'


